# +-----------------------+
# | CALIBRE CONFIGURATION |
# +-----------------------+
# This file is in the HOCON format: https://github.com/lightbend/config/blob/master/HOCON.md
# All times specified are in milliseconds (ms).
# =========================

# The level of detail to log information at.
# VERBOSE, INFO, WARN, ERROR (default VERBOSE)
log_level: "VERBOSE"
# Whether to print detailed stack traces or not.
# Boolean (default true)
print_detailed: true
# The default locale to use plugin-wide.
# String (default en_us)
locale: "en_us"
# Whether to warn on invalid data, or reset/remove it.
# Boolean (default true)
preserve_invalid_data: true
# How long to wait between logging warnings on invalid data errors.
# Integer (default 60000)
invalid_data_error_delay: 60000
# The particle to show when using the `/calibre offset` command.
# [Particle data]
offset_particle: [{ particle: "SWEEP_ATTACK" }]

# Various symbols used throughout the plugin.
symbol: {
  # Padding for spacing.
  #   - If a valid Minecraft font character, uses the character's width.
  #     Otherwise has a width of 1.
  #   - If using a custom resource pack for your server, it is recommended to
  #     create a 0px wide character and use that for this symbol.
  # String (default " ")
  pad: " "
  # A bar segment which is full.
  # String (default "=")
  full_bar: "="
  # A bar segment which is partially full.
  # String (default "~")
  part_bar: "~"
  # A bar segment which is empty.
  # String (default "-")
  empty_bar: "-"
}

# The width of specific characters in this plugin's font map.
# Format is `character: width in Minecraft px`
font_map: {
  # example
  # â†’: 6
}

# Options for any scheduler system which uses a SchedulerSystem.Scheduler.
scheduler: {
  # The time in milliseconds until attempting to clean old tasks.
  # Integer (default 10000)
  clean_delay: 10000,
  # The time in milliseconds until a task that has not been run at its specific time, should be cleaned.
  # Integer (default 100)
  clean_threshold: 100
}

# Settings used by various in-built systems.
system: {
  # `stat_display` system: displays item stats in lore
  stat_display: {
    # The priority of listeners registered. Higher is ran later.
    # Integer (default 1000)
    listener_priority: 1000
    # The width of bars in a stat display.
    bar_widths: [ 25, 12 ]
  }

  # `slot_display` system: displays child slots of a component in lore
  slot_display: {
    # The priority of listeners registered. Higher is ran later.
    # Integer (default 1100)
    listener_priority: 1100
  }

  # `component_container` system: holds components inside itself
  component_container: {
    # The priority of listeners registered. Higher is ran later.
    # Integer (default 1200)
    listener_priority: 1200
  }

  # `name_from_child` system: changes the name of a component to one of its children, if it is available
  name_from_child: {
    # The priority of listeners registered. Higher is ran later.
    # Integer (default 100000)
    listener_priority: 100000
  }

  # `generic_stats` system: provides generic Paper stats that can be modified for an item
  generic_stats: {
    # The priority of listeners registered. Higher is ran later.
    # Integer (default 100000)
    listener_priority: 100000
  }

  # `scheduler` system: provides other system the functionality to schedule delayed tasks
  scheduler: {
    # The priority of listeners registered. Higher is ran later.
    # Integer (default 100000)
    listener_priority: 100000
  }

  # `gun` system: responsible for creating an interactable gun
  gun: {
    # The priority of listeners registered. Higher is ran later.
    # Integer (default 0)
    listener_priority: 0
  }

  # `gun_info` system: displays info about the current held gun to the player
  gun_info: {
    # The priority of listeners registered. Higher is ran later.
    # Integer (default 0)
    listener_priority: 0
  }

  # `fire_mode` system: holds fire modes that can be gathered from the tree, and displays their stats
  fire_mode: {
    # The priority of listeners registered. Higher is ran later.
    # Integer (default 1030)
    listener_priority: 1030
  }

  # `sight` system: holds sights that can be gathered from the tree, and displays their stats
  sight: {
    # The priority of listeners registered. Higher is ran later.
    # Integer (default 1060)
    listener_priority: 1060
  }
}

# The hardness of specific blocks.
# If not specified here, defaults to the correpsonding entry in https://minecraft.gamepedia.com/Explosion#Blast_Resistance
# Format is `id: amount`
hardness: {
  # example
  # cobblestone: 10
}

# Settings on the slot view function.
slot_view: {
  # Whether to allow players to right-click on components in their inventory to see their slots.
  # Boolean (default true)
  enabled: true
  # Where the center slot is positioned in the slot view.
  # Vector2I (default [ 4, 3 ])
  center: [ 4, 3 ]
  # Settings on default icons
  # Item descriptors
  icon: {
    # A normal component slot
    normal: { id: "white_stained_glass_pane" }
    # A required component slot
    required: { id: "cyan_stained_glass_pane" }
    # A component slot which is compatible with the current item in the cursor (if there is a cursor)
    compatible: { id: "blue_stained_glass_pane" }
    # A component slot which is not compatible with the current item in the cursor (if there is a cursor)
    incompatible: { id: "red_stained_glass_pane" }
  }
  # Whether to allow modifying components in a slot view or not.
  # Boolean (default true)
  modification: true
  # Whether to limit modifying components in a slot view to only field modifiable slots.
  # Boolean (default true)
  limited: true
}

# Settings on the quick modify function.
quick_modify: {
  # Whether to allow players to drag components onto another component to combine them, if possible.
  # Boolean (default true)
  enabled: true
  # Whether to limit combining slots to only field modifiable slots.
  # Boolean (default true)
  limited: true
}
