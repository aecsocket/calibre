# +-----------------------+
# | CALIBRE CONFIGURATION |
# +-----------------------+
# This file is in the HOCON format: https://github.com/lightbend/config/blob/master/HOCON.md
# All times specified are in milliseconds (ms).
# =========================

# The level of detail to log information at.
# VERBOSE, INFO, WARN, ERROR (default INFO)
log_level: "INFO"
# Whether to print detailed stack traces or not.
# Boolean (default true)
print_detailed: true
# The default locale to use plugin-wide.
# String (default en_us)
locale: "en_us"
# What to do when invalid data is encountered in a stored component tree.
# CONTINUE: save the invalid data and continue
# REMOVE: remove the invalid data and continue
# WARN: save the invalid data and warn the user
# CONTINUE, REMOVE, WARN (default CONTINUE)
invalid_data_handling: "CONTINUE"
# How long to wait between logging warnings on invalid data errors.
# Integer (default 60000)
invalid_data_error_delay: 60000
# The particle to show when using the `/calibre offset` command.
# [Particle data] (default [{ particle: "END_ROD" }])
offset_particle: [{ particle: "END_ROD" }]

# Various symbols used throughout the plugin.
symbol: {
  # Padding for spacing.
  #   - If a valid Minecraft font character, uses the character's width.
  #     Otherwise has a width of 1.
  #   - If using a custom resource pack for your server, it is recommended to
  #     create a 0px wide character and use that for this symbol.
  # String (default " ")
  pad: " "
  # A bar segment which is full.
  # String (default "=")
  full_bar: "="
  # A bar segment which is partially full.
  # String (default "~")
  part_bar: "~"
  # A bar segment which is empty.
  # String (default "-")
  empty_bar: "-"
}

# The width of specific characters in this plugin's font map.
# Format is `character: width in Minecraft px`
font_map: {
  # example
  # â†’: 6
}

# Options for any scheduler system which uses a SchedulerSystem.Scheduler.
scheduler: {
  # The time in milliseconds until attempting to clean old tasks.
  # Integer (default 10000)
  clean_delay: 10000,
  # The time in milliseconds until a task that has not been run at its specific time, should be cleaned.
  # Integer (default 100)
  clean_threshold: 100
}

# Options on the inbuilt stamina service for sway stabilization.
# 1000 units is, as a baseline, 1 second.
stamina: {
  # The maximum amount of stamina
  # Integer (default 5000)
  max: 5000
  # How much stamina a player recovers per second.
  # Integer (default 1000)
  recover: 1000
  # How long a player must wait after using stamina to start recovering it.
  # Integer (default 2000)
  recover_after: 2000
  # Toggles whether the remaining percentage of stamina displays in a player's air bar.
  # Boolean (default true)
  show_in_air_bar: true
}

# Options on ejected casings.
casing: {
  # The categories of casings there are. These can be any name, and should correspond with a `casing_category`
  # stat with the same category name.
  # Format:
  # (category name): {
  #   material_data: {
  #     (material name): {
  #       sound: ([Sound data])
  #       particle: ([Particle data])
  #     }
  #     default: (see above)
  #   }
  #   remove_on_land: (if the casing item should be destroyed on landing)
  # }

  # example
  # small: {
  #   material_data: {
  #     default: {
  #       sound: [{ sound: "bullet.land.small", dropoff: 2, range: 4 }]
  #       particle: [{ particle: "BLOCK_CRACK", count: 4 }]
  #     }
  #   }
  #   remove_on_land: true
  # }
}

# Options used by stat formatters.
stat_formatter: {
  # The width of bars in a stat display.
  # [Integer] (default [ 25, 12 ])
  bar_widths: [ 25, 12 ]
}

# The hardness of specific blocks.
# If not specified here, defaults to the correpsonding entry in https://minecraft.gamepedia.com/Explosion#Blast_Resistance
# Format is `id: amount`
hardness: {
  # example
  # iron_bars: 0.75
}

# Positions for locational damage.
locational_damage: {
  # Format:
  # (entity type): {
  #   (position name): { min: (minimum Y), max: (maximum Y), multiplier: (damage multiplier) }
  # }

  # example
  # player: {
  #   normal: {
  #     legs: {            max: 0.75, multiplier: 0.75 }
  #     body: { min: 0.75, max: 1.25, multiplier: 1    }
  #     head: { min: 1.25,            multiplier: 4    }
  #   }
  #   sneaking: {
  #     legs: {            max: 0.5,  multiplier: 0.75 }
  #     body: { min: 0.5,  max: 1,    multiplier: 1    }
  #     head: { min: 1,               multiplier: 4    }
  #   }
  # }
  # zombie: ${locational_damage.player.normal}
  # skeleton: ${locational_damage.player.normal}
  # creeper: ${locational_damage.player.normal}
}

# Settings on the slot view function.
slot_view: {
  # Whether to allow players to right-click on components in their inventory to see their slots.
  # Boolean (default true)
  enabled: true
  # Where the center slot is positioned in the slot view.
  # Vector2I (default [ 4, 3 ])
  center: [ 4, 3 ]
  # Settings on default icons
  # Item descriptors
  icon: {
    # A normal component slot
    normal: { id: "white_stained_glass_pane" }
    # A required component slot
    required: { id: "cyan_stained_glass_pane" }
    # A component slot which is compatible with the current item in the cursor (if there is a cursor)
    compatible: { id: "blue_stained_glass_pane" }
    # A component slot which is not compatible with the current item in the cursor (if there is a cursor)
    incompatible: { id: "red_stained_glass_pane" }
  }
  # Whether to allow modifying components in a slot view or not.
  # Boolean (default true)
  modification: true
  # Whether to limit modifying components in a slot view to only field modifiable slots.
  # Boolean (default true)
  limited: true
}

# Settings on the quick modify function.
quick_modify: {
  # Whether to allow players to drag components onto another component to combine them, if possible.
  # Boolean (default true)
  enabled: true
  # Whether to limit combining slots to only field modifiable slots.
  # Boolean (default true)
  limited: true
}
